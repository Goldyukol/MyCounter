{"version":3,"sources":["Display.js","SettingsDisplay.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","classForInc","state","count","maxValue","className","SettingsDisplay","classForInput","onChange","e","currentTarget","value","changeMaxValue","Math","floor","type","max","min","startValue","changeStartValue","Button","classForButton","title","onClick","callback","disabled","App","resetDisabled","incDisabled","setDisabled","numbersOnChange","changeDisplay","incCount","setState","saveState","resetCount","Number","onSetValue","onChangeDisplay","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","render","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c3ed6df.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst Display = (props) => {\r\n\r\n  let classForInc = props.state.count === props.state.maxValue ? 'filter-active' :\r\n    props.state.count === 'incorrect number!' ? 'incorrect' : '';\r\n\r\n  // let valueDisplay = props.numbersOnChange === true ? 'enter values and press set' : props.state.count;\r\n\r\n\r\n  return (\r\n    <div className='counter_display'>\r\n      {/* {this.props.count} */}<div className={classForInc}>{props.state.count}</div>\r\n    </div>\r\n  );\r\n\r\n}\r\nexport default Display;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst SettingsDisplay = (props) => {\r\n\r\n  const onChangeMaxValue = (e) => {\r\n    let maxValue = e.currentTarget.value;\r\n    props.changeMaxValue(maxValue);\r\n  }\r\n\r\n  const onChangeStartValue = (e) => {\r\n    let startValue = e.currentTarget.value;\r\n    props.changeStartValue(startValue)\r\n\r\n  }\r\n\r\n  let classForInput = props.count === 'incorrect number!' ? 'settings_error' : 'settings_inputs';\r\n\r\n  return (\r\n    <div className='settings_display'>\r\n      MAX VALUE: <input onChange={onChangeMaxValue} value={Math.floor(props.maxValue)} className={classForInput} type='number' max='20' min='-99' />\r\n      START VALUE: <input onChange={onChangeStartValue} value={Math.floor(props.startValue)} className={classForInput} type='number' max='20' min='-99' />\r\n    </div >\r\n  );\r\n\r\n}\r\nexport default SettingsDisplay;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nconst Button = (props) => {\r\n\r\n  const callback = () => {\r\n    props.callback();\r\n  }\r\n\r\n  let classForButton = props.title === 'INC' ? 'counter_inc' :\r\n    props.title === 'RESET' ? 'counter_reset' :\r\n      props.title === 'SET' ? 'settings_set ' :\r\n        '';\r\n\r\n  return (\r\n    <div>\r\n      <button className={classForButton} onClick={callback} disabled={props.disabled}>{props.title}</button>\r\n    </div >\r\n  );\r\n\r\n}\r\nexport default Button;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Display from './Display';\r\nimport SettingsDisplay from './SettingsDisplay';\r\nimport Button from './Button';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    count: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    resetDisabled: false,\r\n    incDisabled: false,\r\n    setDisabled: false,\r\n    numbersOnChange: false,\r\n    changeDisplay: false\r\n  };\r\n\r\n  incCount = () => {\r\n\r\n    this.setState({\r\n      count: this.state.count + 1\r\n    }, () => {\r\n      if (this.state.count === this.state.maxValue) {\r\n        this.setState({\r\n          incDisabled: true\r\n        });\r\n      }\r\n    })\r\n    this.saveState();\r\n  }\r\n\r\n  resetCount = () => {\r\n    this.setState({\r\n      count: this.state.startValue,\r\n      incDisabled: false\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  changeMaxValue = (maxValue) => {\r\n    this.setState({\r\n      maxValue: Number(maxValue),\r\n      setDisabled: false,\r\n      resetDisabled: true,\r\n      incDisabled: true,\r\n      numbersOnChange: true,\r\n      count: 'enter value and press \\'set\\''\r\n    }, () => {\r\n      if (this.state.maxValue < 0) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n      if (this.state.startValue < 0) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n      if (this.state.startValue > this.state.maxValue) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n      if (this.state.maxValue === this.state.startValue) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n    })\r\n    this.saveState();\r\n  }\r\n\r\n  changeStartValue = (startValue) => {\r\n    this.setState({\r\n      startValue: Number(startValue),\r\n      setDisabled: false,\r\n      resetDisabled: true,\r\n      incDisabled: true,\r\n      numbersOnChange: true,\r\n      count: 'enter value and press \\'set\\''\r\n    }, () => {\r\n      if (this.state.startValue < 0) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n      if (this.state.maxValue < 0) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n      if (this.state.startValue > this.state.maxValue) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n      if (this.state.maxValue === this.state.startValue) {\r\n        this.setState({\r\n          setDisabled: true,\r\n          count: 'incorrect number!'\r\n        })\r\n      }\r\n    })\r\n    this.saveState();\r\n  }\r\n\r\n\r\n  onSetValue = () => {\r\n    this.setState({\r\n      count: this.state.startValue,\r\n      setDisabled: true,\r\n      incDisabled: false,\r\n      resetDisabled: false,\r\n      numbersOnChange: false,\r\n      changeDisplay: false\r\n    })\r\n    this.saveState();\r\n  }\r\n\r\n  onChangeDisplay = () => {\r\n    this.setState({\r\n      changeDisplay: true\r\n    })\r\n    this.saveState();\r\n  }\r\n\r\n  saveState = () => {\r\n    let stateAsString = JSON.stringify(this.state)\r\n    localStorage.setItem('our-state', stateAsString);\r\n  }\r\n\r\n  restoreState = () => {\r\n    let state = {\r\n      count: 0,\r\n      maxValue: 5,\r\n      startValue: 0,\r\n      resetDisabled: false,\r\n      incDisabled: false,\r\n      setDisabled: false,\r\n      numbersOnChange: false,\r\n    };\r\n\r\n\r\n    let stateAsString = localStorage.getItem('our-state');\r\n\r\n    if (stateAsString != null) {\r\n      state = JSON.parse(stateAsString);\r\n    }\r\n    this.setState(state);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.restoreState();\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div className='container'>\r\n        {!this.state.changeDisplay &&\r\n          <div className='counter_wrapper'>\r\n            <Display state={this.state}\r\n              numbersOnChange={this.state.numbersOnChange} />\r\n            <div className='counter_buttons'>\r\n              <Button\r\n                title='RESET'\r\n                callback={this.resetCount}\r\n                disabled={this.state.resetDisabled}\r\n              />\r\n              <Button\r\n                title='INC'\r\n                callback={this.incCount}\r\n                disabled={this.state.incDisabled}\r\n              />\r\n              <Button title='SET'\r\n                callback={this.onChangeDisplay}\r\n              // disabled={this.state.setDisabled}\r\n              />\r\n            </div>\r\n          </div>}\r\n\r\n        {this.state.changeDisplay && <div className='counter_settings'>\r\n          <SettingsDisplay maxValue={this.state.maxValue}\r\n            startValue={this.state.startValue}\r\n            changeMaxValue={this.changeMaxValue}\r\n            count={this.state.count}\r\n            changeStartValue={this.changeStartValue} />\r\n          <Button title='SET'\r\n            callback={this.onSetValue}\r\n            disabled={this.state.setDisabled} />\r\n        </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}